#: vim: set fileencoding=utf-8 foldmethod=marker foldlevel=0 foldmarker=<<<,>>>:
#: vim: set colorcolumn=81 nospell:

{{ if eq .codename "GFT" -}}
#: Wrork around for message `laps: Permission denied` when opening a new shell
printf '\033c'
{{- end }}

#: Environment variables for applications respecting XDG specifications <<<

export XDG_CONFIG_HOME="$HOME/.config"
export XDG_CACHE_HOME="$HOME/.cache"
export XDG_STATE_HOME="$HOME/.local/state"
export XDG_DATA_HOME="$HOME/.local/share"

#: >>>

#: Force UTF-8 usage <<<

export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

#: >>>

#: Homebrew <<<

if [[ -x /opt/homebrew/bin/brew ]]; then
    eval "$(/opt/homebrew/bin/brew shellenv)"
elif [[ -x /usr/local/bin/brew ]]; then
    eval "$(/usr/local/bin/brew shellenv)"
elif [[ -x /home/linuxbrew/.linuxbrew/bin/brew ]]; then
    eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
fi

type brew &>/dev/null && brew_prefix="$(brew --prefix)"

#: >>>

{{ if eq .chezmoi.os "darwin" -}}

#: SSH <<<

#: SSH Agent forwarding in VSCode Dev Container without creating LaunchAgents
#: Reference: https://github.com/maxgoedjen/secretive/blob/main/APP_CONFIG.md.
if [[ -S "$HOME/Library/Containers/com.maxgoedjen.Secretive.SecretAgent/Data/socket.ssh" ]]; then
    export SSH_AUTH_SOCK="$HOME/Library/Containers/com.maxgoedjen.Secretive.SecretAgent/Data/socket.ssh"
fi

#: >>>

{{- end }}

#: GnuPG <<<

export GNUPGHOME="$XDG_DATA_HOME/gnupg"

#: >>>

#: Pyenv <<<

#: Require the following packages on Debian-based distros:
#: - build-essential
#: - libssl-dev
#: - zlib1g-dev
#: - libbz2-dev
#: - libreadline-dev
#: - libsqlite3-dev
#: - curl
#: - libncursesw5-dev
#: - xz-utils
#: - tk-dev
#: - libxml2-dev
#: - libxmlsec1-dev
#: - libffi-dev
#: - liblzma-dev

type pyenv &>/dev/null && {
    export PYENV_ROOT="$XDG_DATA_HOME/pyenv"
    eval "$(pyenv init -)"
}

#: >>>

#: PowerShell <<<

export POWERSHELL_UPDATECHECK=Off
export POWERSHELL_TELEMETRY_OPTOUT=1

#: >>>

#: AWS <<<

#: Workaround to move AWS config to XDG_CONFIG_HOME until this issue is fixed:
#: https://github.com/aws/aws-sdk/issues/30
export AWS_CONFIG_FILE="$XDG_CONFIG_HOME/aws/config"
export AWS_CLI_HISTORY_FILE="$XDG_CONFIG_HOME/aws/history"
export AWS_CREDENTIALS_FILE="$XDG_CONFIG_HOME/aws/credentials"
#: For some reason Terraform doesn't like the `AWS_WEB_IDENTITY_TOKEN_FILE`
#: variable, causing it to throw this: `WebIdentityErr: role ARN is not set`
#: so you'd better not export it if not necessary.
# export AWS_WEB_IDENTITY_TOKEN_FILE="$XDG_CONFIG_HOME/aws/token"
export AWS_SHARED_CREDENTIALS_FILE="$XDG_CONFIG_HOME/aws/shared-credentials"

#: >>>

#: Node.js <<<

export NODE_REPL_HISTORY="$XDG_CACHE_HOME"/node/history
export NPM_CONFIG_USERCONFIG="$XDG_CONFIG_HOME/npm/config"
export NPM_CONFIG_CACHE="$XDG_CACHE_HOME/npm"

command -v npm >/dev/null 2>&1 && {
    PATH="$(npm config get prefix)/bin:$PATH"
    export PATH
}

#: >>>

#: Rust <<<

export CARGO_HOME="$XDG_CACHE_HOME/cargo"
[ -r "$CARGO_HOME/env" ] && . "$CARGO_HOME/env"
export RUSTUP_HOME="$XDG_CACHE_HOME/rustup"
export PATH="$CARGO_HOME/bin:$PATH"


#: >>>

#: Go <<<

export GOPATH="$XDG_DATA_HOME/go"
export PATH="$GOPATH/bin:$PATH"

#: >>>

#: Java <<<

#: To add a new Java version, for example, 11, run:
#: - macOS:
#:     jenv add "$(brew --prefix openjdk@11)/libexec/openjdk.jdk/Contents/Home"
#: - Linux:
#:     jenv add "$(brew --prefix openjdk@11)/libexec"
type jenv &>/dev/null && {
    export PATH="$HOME/.jenv/bin:$PATH"
    eval "$(jenv init -)"
}

#: >>>

#: Android Studio <<<

export ANDROID_HOME="$XDG_DATA_HOME"/android

#: >>>

#: Gradle <<<

export GRADLE_USER_HOME="$XDG_DATA_HOME"/gradle

#: >>>

#: Docker <<<

#: On macOS, Docker Desktop use the `~/.docker` directory
if [[ -d "$HOME/.docker" ]]; then
    export DOCKER_CONFIG="$HOME/.docker"
    export DOCKER_HOST="unix://$HOME/.docker/run/docker.sock"
else
    export DOCKER_CONFIG="$XDG_CONFIG_HOME/docker"
fi
[[ -d "$DOCKER_CONFIG"/bin ]] && export PATH="$DOCKER_CONFIG/bin:$PATH"

#: >>>

#: terminfo <<<

# export TERMINFO="$XDG_DATA_HOME/terminfo"
# export TERMINFO_DIRS="$XDG_DATA_HOME/terminfo:/usr/share/terminfo"

#: >>>

#: Wget <<<

#: Change history file location
alias wget=wget --hsts-file="$XDG_DATA_HOME/wget-hsts"

#: >>>

#: Python <<<

#: Load Python startup file (usually for disabling history)
[[ -f "$XDG_CONFIG_HOME/python/startup" ]] &&
    export PYTHONSTARTUP="$XDG_CONFIG_HOME/python/startup"

#: Disable keyring backend as some tools like `poetry` often throw errors when
#: trying to use in a non-GUI environment
export PYTHON_KEYRING_BACKEND=keyring.backends.null.Keyring

#: Disable pip version check
export PIP_DISABLE_PIP_VERSION_CHECK=1

#: >>>

#: IPython <<<

export IPYTHONDIR="$XDG_CONFIG_HOME/ipython"
export JUPYTER_CONFIG_DIR="$XDG_CONFIG_HOME/jupyter"

#: >>>

#: Executable search paths, should be at the end to be prepended <<<

#: Set PATH so it includes user's private bin if it exists
[ -d "$HOME/bin" ] && PATH="$HOME/bin:$PATH"

#: Set PATH so it includes user's private bin if it exists
[ -d "$HOME/.local/bin" ] && PATH="$HOME/.local/bin:$PATH"

#: >>>
